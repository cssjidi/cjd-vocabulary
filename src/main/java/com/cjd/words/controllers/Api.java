package com.cjd.words.controllers;

import com.cjd.words.User;
import com.cjd.words.models.Vocabulary;
import com.cjd.words.models.VocabularyRepository;
import com.fasterxml.jackson.databind.util.JSONPObject;
import org.json.JSONString;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;

import javax.annotation.Resource;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.Array;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Document;

@RestController
@RequestMapping("/api")
public class Api{
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private VocabularyRepository vocabularyRepository;

    @Resource
    private JdbcTemplate db;

    @RequestMapping("/words")
    public List words(){
        String sql = "SELECT * FROM cjd_words";
        List<Vocabulary> list = db.query(sql, new RowMapper<Vocabulary>() {
            @Override
            public Vocabulary mapRow(ResultSet resultSet, int i) throws SQLException {
                Vocabulary vol = new Vocabulary();
                vol.setId(resultSet.getLong("id"));
                vol.setDescription(resultSet.getString("description"));
                vol.setName(resultSet.getString("name"));
                vol.setUpdate_time();
                vol.setAdd_time();
                return vol;
            }
        });
        return list;
    }
    @PostMapping(path="/search")
    public @ResponseBody String search(@RequestParam Map map){
        System.out.println(map);
        try
        {
            Document document = Jsoup.connect("http://dict-mobile.iciba.com/interface/index.php?c=word&m=getsuggest&word="+map.get("word")+"&nums=5&ck=709a0db45332167b0e2ce1868b84773e&timestamp=1575017298804&client=6&uid=0&is_need_mean=1&callback=jsonp_1575017298804_36121").get();
            String regex = "jsonp_1575017298804_36121\\((.*?)\\)$";
            String body = document.body().html();
            JSONObject json = new JSONObject(body.replaceAll(regex,"$1"));
            JSONArray array = new JSONArray(json.get("message").toString());
            for(int i=0;i<array.length();i++){
                JSONObject jsonLevel2 = new JSONObject(array.get(i).toString());
                if(jsonLevel2.has("means")) {
                    JSONArray arrayLevel2 = new JSONArray(jsonLevel2.get("means").toString());
                    for (int j = 0; j < arrayLevel2.length(); j++) {
                        JSONObject jsonLevel3 = new JSONObject(arrayLevel2.get(j).toString());
                        JSONArray array3 = new JSONArray(jsonLevel3.get("means").toString());
                        for(int k=0;k<array3.length();k++){
                            System.out.println(array3.get(k).toString());
                        }
                    }
                    System.out.println(jsonLevel2.get("key"));
                }
            }
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        //RestTemplate rest = new RestTemplate();
        //Vocabulary vo = rest.getForObject("http://dict-mobile.iciba.com/interface/index.php?c=word&m=getsuggest&word=gt&nums=5&ck=709a0db45332167b0e2ce1868b84773e&timestamp=1575017298804&client=6&uid=0&is_need_mean=1&callback=jsonp_1575017298804_36121",Vocabulary.class);
//        System.out.println(vo.toString());
//        Vocabulary n = new Vocabulary();
//        n.setName(map.get("name").toString());
//        n.setDescription(map.get("description").toString());
//        n.setAdverb(map.get("adverb").toString());
//        n.setAdjective(map.get("adjective").toString());
//        n.setDescription(map.get("description").toString());
//        n.setAdd_time();
//        n.setUpdate_time();
//        vocabularyRepository.save(n);
        return "save";
    }

    private void findOrCreate(RestTemplateBuilder build){
//        Boolean exists = this.findRecord(params.get("name").toString());
//        if(!exists){
//
//            //http://dict-mobile.iciba.com/interface/index.php?c=word&m=getsuggest&word=gt&nums=5&ck=709a0db45332167b0e2ce1868b84773e&timestamp=1575017298804&client=6&uid=0&is_need_mean=1&callback=jsonp_1575017298804_36121
//        }
    }
    private void updateRecord(){

    }
    private Boolean findRecord(String name){
        int exists = db.queryForObject("SELECT COUNT(*) FROM cjd_words WHERE 1=1 AND name='"+name+"'",int.class);
        return exists > 0 ? true : false;
    }
}
